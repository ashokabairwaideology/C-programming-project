//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace sat.db {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("maillistDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class maillistDataSet : System.Data.DataSet {
        
        private adminusersDataTable tableadminusers;
        
        private batchesDataTable tablebatches;
        
        private coursesDataTable tablecourses;
        
        private feedbackDataTable tablefeedback;
        
        private newregistrationDataTable tablenewregistration;
        
        private user_subjectDataTable tableuser_subject;
        
        private System.Data.DataRelation relationfk_coursecode;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public maillistDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected maillistDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["adminusers"] != null)) {
                    base.Tables.Add(new adminusersDataTable(ds.Tables["adminusers"]));
                }
                if ((ds.Tables["batches"] != null)) {
                    base.Tables.Add(new batchesDataTable(ds.Tables["batches"]));
                }
                if ((ds.Tables["courses"] != null)) {
                    base.Tables.Add(new coursesDataTable(ds.Tables["courses"]));
                }
                if ((ds.Tables["feedback"] != null)) {
                    base.Tables.Add(new feedbackDataTable(ds.Tables["feedback"]));
                }
                if ((ds.Tables["newregistration"] != null)) {
                    base.Tables.Add(new newregistrationDataTable(ds.Tables["newregistration"]));
                }
                if ((ds.Tables["user_subject"] != null)) {
                    base.Tables.Add(new user_subjectDataTable(ds.Tables["user_subject"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public adminusersDataTable adminusers {
            get {
                return this.tableadminusers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public batchesDataTable batches {
            get {
                return this.tablebatches;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public coursesDataTable courses {
            get {
                return this.tablecourses;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public feedbackDataTable feedback {
            get {
                return this.tablefeedback;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public newregistrationDataTable newregistration {
            get {
                return this.tablenewregistration;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public user_subjectDataTable user_subject {
            get {
                return this.tableuser_subject;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            maillistDataSet cln = ((maillistDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["adminusers"] != null)) {
                    base.Tables.Add(new adminusersDataTable(ds.Tables["adminusers"]));
                }
                if ((ds.Tables["batches"] != null)) {
                    base.Tables.Add(new batchesDataTable(ds.Tables["batches"]));
                }
                if ((ds.Tables["courses"] != null)) {
                    base.Tables.Add(new coursesDataTable(ds.Tables["courses"]));
                }
                if ((ds.Tables["feedback"] != null)) {
                    base.Tables.Add(new feedbackDataTable(ds.Tables["feedback"]));
                }
                if ((ds.Tables["newregistration"] != null)) {
                    base.Tables.Add(new newregistrationDataTable(ds.Tables["newregistration"]));
                }
                if ((ds.Tables["user_subject"] != null)) {
                    base.Tables.Add(new user_subjectDataTable(ds.Tables["user_subject"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableadminusers = ((adminusersDataTable)(base.Tables["adminusers"]));
            if ((initTable == true)) {
                if ((this.tableadminusers != null)) {
                    this.tableadminusers.InitVars();
                }
            }
            this.tablebatches = ((batchesDataTable)(base.Tables["batches"]));
            if ((initTable == true)) {
                if ((this.tablebatches != null)) {
                    this.tablebatches.InitVars();
                }
            }
            this.tablecourses = ((coursesDataTable)(base.Tables["courses"]));
            if ((initTable == true)) {
                if ((this.tablecourses != null)) {
                    this.tablecourses.InitVars();
                }
            }
            this.tablefeedback = ((feedbackDataTable)(base.Tables["feedback"]));
            if ((initTable == true)) {
                if ((this.tablefeedback != null)) {
                    this.tablefeedback.InitVars();
                }
            }
            this.tablenewregistration = ((newregistrationDataTable)(base.Tables["newregistration"]));
            if ((initTable == true)) {
                if ((this.tablenewregistration != null)) {
                    this.tablenewregistration.InitVars();
                }
            }
            this.tableuser_subject = ((user_subjectDataTable)(base.Tables["user_subject"]));
            if ((initTable == true)) {
                if ((this.tableuser_subject != null)) {
                    this.tableuser_subject.InitVars();
                }
            }
            this.relationfk_coursecode = this.Relations["fk_coursecode"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "maillistDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/maillistDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableadminusers = new adminusersDataTable();
            base.Tables.Add(this.tableadminusers);
            this.tablebatches = new batchesDataTable();
            base.Tables.Add(this.tablebatches);
            this.tablecourses = new coursesDataTable();
            base.Tables.Add(this.tablecourses);
            this.tablefeedback = new feedbackDataTable();
            base.Tables.Add(this.tablefeedback);
            this.tablenewregistration = new newregistrationDataTable();
            base.Tables.Add(this.tablenewregistration);
            this.tableuser_subject = new user_subjectDataTable();
            base.Tables.Add(this.tableuser_subject);
            this.relationfk_coursecode = new System.Data.DataRelation("fk_coursecode", new System.Data.DataColumn[] {
                        this.tablecourses.coursecodeColumn}, new System.Data.DataColumn[] {
                        this.tablebatches.coursecodeColumn}, false);
            this.Relations.Add(this.relationfk_coursecode);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeadminusers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebatches() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecourses() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefeedback() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializenewregistration() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeuser_subject() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            maillistDataSet ds = new maillistDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void adminusersRowChangeEventHandler(object sender, adminusersRowChangeEvent e);
        
        public delegate void batchesRowChangeEventHandler(object sender, batchesRowChangeEvent e);
        
        public delegate void coursesRowChangeEventHandler(object sender, coursesRowChangeEvent e);
        
        public delegate void feedbackRowChangeEventHandler(object sender, feedbackRowChangeEvent e);
        
        public delegate void newregistrationRowChangeEventHandler(object sender, newregistrationRowChangeEvent e);
        
        public delegate void user_subjectRowChangeEventHandler(object sender, user_subjectRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class adminusersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnadminuser;
            
            private System.Data.DataColumn columnadminpwd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public adminusersDataTable() {
                this.TableName = "adminusers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal adminusersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected adminusersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn adminuserColumn {
                get {
                    return this.columnadminuser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn adminpwdColumn {
                get {
                    return this.columnadminpwd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public adminusersRow this[int index] {
                get {
                    return ((adminusersRow)(this.Rows[index]));
                }
            }
            
            public event adminusersRowChangeEventHandler adminusersRowChanging;
            
            public event adminusersRowChangeEventHandler adminusersRowChanged;
            
            public event adminusersRowChangeEventHandler adminusersRowDeleting;
            
            public event adminusersRowChangeEventHandler adminusersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddadminusersRow(adminusersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public adminusersRow AddadminusersRow(string adminuser, string adminpwd) {
                adminusersRow rowadminusersRow = ((adminusersRow)(this.NewRow()));
                rowadminusersRow.ItemArray = new object[] {
                        adminuser,
                        adminpwd};
                this.Rows.Add(rowadminusersRow);
                return rowadminusersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                adminusersDataTable cln = ((adminusersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new adminusersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnadminuser = base.Columns["adminuser"];
                this.columnadminpwd = base.Columns["adminpwd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnadminuser = new System.Data.DataColumn("adminuser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnadminuser);
                this.columnadminpwd = new System.Data.DataColumn("adminpwd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnadminpwd);
                this.columnadminuser.AllowDBNull = false;
                this.columnadminuser.MaxLength = 50;
                this.columnadminpwd.AllowDBNull = false;
                this.columnadminpwd.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public adminusersRow NewadminusersRow() {
                return ((adminusersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new adminusersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(adminusersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.adminusersRowChanged != null)) {
                    this.adminusersRowChanged(this, new adminusersRowChangeEvent(((adminusersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.adminusersRowChanging != null)) {
                    this.adminusersRowChanging(this, new adminusersRowChangeEvent(((adminusersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.adminusersRowDeleted != null)) {
                    this.adminusersRowDeleted(this, new adminusersRowChangeEvent(((adminusersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.adminusersRowDeleting != null)) {
                    this.adminusersRowDeleting(this, new adminusersRowChangeEvent(((adminusersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveadminusersRow(adminusersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                maillistDataSet ds = new maillistDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "adminusersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class batchesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnbatchno;
            
            private System.Data.DataColumn columncoursecode;
            
            private System.Data.DataColumn columnexpstdate;
            
            private System.Data.DataColumn columnannounceddate;
            
            private System.Data.DataColumn columntrackdesc;
            
            private System.Data.DataColumn columndisplayremarks;
            
            private System.Data.DataColumn columndisplayreqd;
            
            private System.Data.DataColumn columndisplayorder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesDataTable() {
                this.TableName = "batches";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal batchesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected batchesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn batchnoColumn {
                get {
                    return this.columnbatchno;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn coursecodeColumn {
                get {
                    return this.columncoursecode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn expstdateColumn {
                get {
                    return this.columnexpstdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn announceddateColumn {
                get {
                    return this.columnannounceddate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn trackdescColumn {
                get {
                    return this.columntrackdesc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn displayremarksColumn {
                get {
                    return this.columndisplayremarks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn displayreqdColumn {
                get {
                    return this.columndisplayreqd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn displayorderColumn {
                get {
                    return this.columndisplayorder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesRow this[int index] {
                get {
                    return ((batchesRow)(this.Rows[index]));
                }
            }
            
            public event batchesRowChangeEventHandler batchesRowChanging;
            
            public event batchesRowChangeEventHandler batchesRowChanged;
            
            public event batchesRowChangeEventHandler batchesRowDeleting;
            
            public event batchesRowChangeEventHandler batchesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddbatchesRow(batchesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesRow AddbatchesRow(string batchno, coursesRow parentcoursesRowByfk_coursecode, System.DateTime expstdate, System.DateTime announceddate, string trackdesc, string displayremarks, byte displayorder) {
                batchesRow rowbatchesRow = ((batchesRow)(this.NewRow()));
                rowbatchesRow.ItemArray = new object[] {
                        batchno,
                        parentcoursesRowByfk_coursecode[0],
                        expstdate,
                        announceddate,
                        trackdesc,
                        displayremarks,
                        null,
                        displayorder};
                this.Rows.Add(rowbatchesRow);
                return rowbatchesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesRow FindBybatchno(string batchno) {
                return ((batchesRow)(this.Rows.Find(new object[] {
                            batchno})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                batchesDataTable cln = ((batchesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new batchesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbatchno = base.Columns["batchno"];
                this.columncoursecode = base.Columns["coursecode"];
                this.columnexpstdate = base.Columns["expstdate"];
                this.columnannounceddate = base.Columns["announceddate"];
                this.columntrackdesc = base.Columns["trackdesc"];
                this.columndisplayremarks = base.Columns["displayremarks"];
                this.columndisplayreqd = base.Columns["displayreqd"];
                this.columndisplayorder = base.Columns["displayorder"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbatchno = new System.Data.DataColumn("batchno", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatchno);
                this.columncoursecode = new System.Data.DataColumn("coursecode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncoursecode);
                this.columnexpstdate = new System.Data.DataColumn("expstdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexpstdate);
                this.columnannounceddate = new System.Data.DataColumn("announceddate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnannounceddate);
                this.columntrackdesc = new System.Data.DataColumn("trackdesc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntrackdesc);
                this.columndisplayremarks = new System.Data.DataColumn("displayremarks", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplayremarks);
                this.columndisplayreqd = new System.Data.DataColumn("displayreqd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplayreqd);
                this.columndisplayorder = new System.Data.DataColumn("displayorder", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplayorder);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnbatchno}, true));
                this.columnbatchno.AllowDBNull = false;
                this.columnbatchno.Unique = true;
                this.columnbatchno.MaxLength = 5;
                this.columncoursecode.MaxLength = 8;
                this.columntrackdesc.MaxLength = 20;
                this.columndisplayremarks.MaxLength = 50;
                this.columndisplayreqd.AutoIncrement = true;
                this.columndisplayreqd.AllowDBNull = false;
                this.columndisplayreqd.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesRow NewbatchesRow() {
                return ((batchesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new batchesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(batchesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.batchesRowChanged != null)) {
                    this.batchesRowChanged(this, new batchesRowChangeEvent(((batchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.batchesRowChanging != null)) {
                    this.batchesRowChanging(this, new batchesRowChangeEvent(((batchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.batchesRowDeleted != null)) {
                    this.batchesRowDeleted(this, new batchesRowChangeEvent(((batchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.batchesRowDeleting != null)) {
                    this.batchesRowDeleting(this, new batchesRowChangeEvent(((batchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovebatchesRow(batchesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                maillistDataSet ds = new maillistDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "batchesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class coursesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncoursecode;
            
            private System.Data.DataColumn columntitle;
            
            private System.Data.DataColumn columnversion;
            
            private System.Data.DataColumn columnduration;
            
            private System.Data.DataColumn columnfee;
            
            private System.Data.DataColumn columnotherfee;
            
            private System.Data.DataColumn columnstatus;
            
            private System.Data.DataColumn columnremarks;
            
            private System.Data.DataColumn columnprerequisite;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesDataTable() {
                this.TableName = "courses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal coursesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected coursesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn coursecodeColumn {
                get {
                    return this.columncoursecode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn feeColumn {
                get {
                    return this.columnfee;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn otherfeeColumn {
                get {
                    return this.columnotherfee;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn remarksColumn {
                get {
                    return this.columnremarks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prerequisiteColumn {
                get {
                    return this.columnprerequisite;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesRow this[int index] {
                get {
                    return ((coursesRow)(this.Rows[index]));
                }
            }
            
            public event coursesRowChangeEventHandler coursesRowChanging;
            
            public event coursesRowChangeEventHandler coursesRowChanged;
            
            public event coursesRowChangeEventHandler coursesRowDeleting;
            
            public event coursesRowChangeEventHandler coursesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcoursesRow(coursesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesRow AddcoursesRow(string coursecode, string title, string version, short duration, decimal fee, decimal otherfee, string status, string remarks, string prerequisite) {
                coursesRow rowcoursesRow = ((coursesRow)(this.NewRow()));
                rowcoursesRow.ItemArray = new object[] {
                        coursecode,
                        title,
                        version,
                        duration,
                        fee,
                        otherfee,
                        status,
                        remarks,
                        prerequisite};
                this.Rows.Add(rowcoursesRow);
                return rowcoursesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesRow FindBycoursecode(string coursecode) {
                return ((coursesRow)(this.Rows.Find(new object[] {
                            coursecode})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                coursesDataTable cln = ((coursesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new coursesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncoursecode = base.Columns["coursecode"];
                this.columntitle = base.Columns["title"];
                this.columnversion = base.Columns["version"];
                this.columnduration = base.Columns["duration"];
                this.columnfee = base.Columns["fee"];
                this.columnotherfee = base.Columns["otherfee"];
                this.columnstatus = base.Columns["status"];
                this.columnremarks = base.Columns["remarks"];
                this.columnprerequisite = base.Columns["prerequisite"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncoursecode = new System.Data.DataColumn("coursecode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncoursecode);
                this.columntitle = new System.Data.DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnversion = new System.Data.DataColumn("version", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversion);
                this.columnduration = new System.Data.DataColumn("duration", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnduration);
                this.columnfee = new System.Data.DataColumn("fee", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfee);
                this.columnotherfee = new System.Data.DataColumn("otherfee", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnotherfee);
                this.columnstatus = new System.Data.DataColumn("status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnremarks = new System.Data.DataColumn("remarks", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnremarks);
                this.columnprerequisite = new System.Data.DataColumn("prerequisite", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprerequisite);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncoursecode}, true));
                this.columncoursecode.AllowDBNull = false;
                this.columncoursecode.Unique = true;
                this.columncoursecode.MaxLength = 8;
                this.columntitle.MaxLength = 50;
                this.columnversion.MaxLength = 10;
                this.columnstatus.MaxLength = 2;
                this.columnremarks.MaxLength = 100;
                this.columnprerequisite.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesRow NewcoursesRow() {
                return ((coursesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new coursesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(coursesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.coursesRowChanged != null)) {
                    this.coursesRowChanged(this, new coursesRowChangeEvent(((coursesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.coursesRowChanging != null)) {
                    this.coursesRowChanging(this, new coursesRowChangeEvent(((coursesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.coursesRowDeleted != null)) {
                    this.coursesRowDeleted(this, new coursesRowChangeEvent(((coursesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.coursesRowDeleting != null)) {
                    this.coursesRowDeleting(this, new coursesRowChangeEvent(((coursesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecoursesRow(coursesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                maillistDataSet ds = new maillistDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "coursesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class feedbackDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsubfeedback;
            
            private System.Data.DataColumn columnemailid;
            
            private System.Data.DataColumn columndate;
            
            private System.Data.DataColumn columncomment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public feedbackDataTable() {
                this.TableName = "feedback";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal feedbackDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected feedbackDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn subfeedbackColumn {
                get {
                    return this.columnsubfeedback;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn emailidColumn {
                get {
                    return this.columnemailid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public feedbackRow this[int index] {
                get {
                    return ((feedbackRow)(this.Rows[index]));
                }
            }
            
            public event feedbackRowChangeEventHandler feedbackRowChanging;
            
            public event feedbackRowChangeEventHandler feedbackRowChanged;
            
            public event feedbackRowChangeEventHandler feedbackRowDeleting;
            
            public event feedbackRowChangeEventHandler feedbackRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfeedbackRow(feedbackRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public feedbackRow AddfeedbackRow(string subfeedback, string emailid, string date, string comment) {
                feedbackRow rowfeedbackRow = ((feedbackRow)(this.NewRow()));
                rowfeedbackRow.ItemArray = new object[] {
                        subfeedback,
                        emailid,
                        date,
                        comment};
                this.Rows.Add(rowfeedbackRow);
                return rowfeedbackRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                feedbackDataTable cln = ((feedbackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new feedbackDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsubfeedback = base.Columns["subfeedback"];
                this.columnemailid = base.Columns["emailid"];
                this.columndate = base.Columns["date"];
                this.columncomment = base.Columns["comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsubfeedback = new System.Data.DataColumn("subfeedback", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubfeedback);
                this.columnemailid = new System.Data.DataColumn("emailid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemailid);
                this.columndate = new System.Data.DataColumn("date", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columncomment = new System.Data.DataColumn("comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.columnsubfeedback.AllowDBNull = false;
                this.columnsubfeedback.MaxLength = 200;
                this.columnemailid.AllowDBNull = false;
                this.columnemailid.MaxLength = 20;
                this.columndate.AllowDBNull = false;
                this.columndate.MaxLength = 20;
                this.columncomment.AllowDBNull = false;
                this.columncomment.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public feedbackRow NewfeedbackRow() {
                return ((feedbackRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new feedbackRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(feedbackRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.feedbackRowChanged != null)) {
                    this.feedbackRowChanged(this, new feedbackRowChangeEvent(((feedbackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.feedbackRowChanging != null)) {
                    this.feedbackRowChanging(this, new feedbackRowChangeEvent(((feedbackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.feedbackRowDeleted != null)) {
                    this.feedbackRowDeleted(this, new feedbackRowChangeEvent(((feedbackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.feedbackRowDeleting != null)) {
                    this.feedbackRowDeleting(this, new feedbackRowChangeEvent(((feedbackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefeedbackRow(feedbackRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                maillistDataSet ds = new maillistDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "feedbackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class newregistrationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnsurname;
            
            private System.Data.DataColumn columnpassword;
            
            private System.Data.DataColumn columnconfirmpassword;
            
            private System.Data.DataColumn columndob;
            
            private System.Data.DataColumn columngender;
            
            private System.Data.DataColumn columnemailid;
            
            private System.Data.DataColumn columnalternateemailid;
            
            private System.Data.DataColumn columnotherdetails;
            
            private System.Data.DataColumn columnregid;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public newregistrationDataTable() {
                this.TableName = "newregistration";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal newregistrationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected newregistrationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn surnameColumn {
                get {
                    return this.columnsurname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn confirmpasswordColumn {
                get {
                    return this.columnconfirmpassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dobColumn {
                get {
                    return this.columndob;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn genderColumn {
                get {
                    return this.columngender;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn emailidColumn {
                get {
                    return this.columnemailid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn alternateemailidColumn {
                get {
                    return this.columnalternateemailid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn otherdetailsColumn {
                get {
                    return this.columnotherdetails;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regidColumn {
                get {
                    return this.columnregid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public newregistrationRow this[int index] {
                get {
                    return ((newregistrationRow)(this.Rows[index]));
                }
            }
            
            public event newregistrationRowChangeEventHandler newregistrationRowChanging;
            
            public event newregistrationRowChangeEventHandler newregistrationRowChanged;
            
            public event newregistrationRowChangeEventHandler newregistrationRowDeleting;
            
            public event newregistrationRowChangeEventHandler newregistrationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddnewregistrationRow(newregistrationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public newregistrationRow AddnewregistrationRow(string name, string surname, string password, string confirmpassword, string dob, string gender, string emailid, string alternateemailid, string otherdetails) {
                newregistrationRow rownewregistrationRow = ((newregistrationRow)(this.NewRow()));
                rownewregistrationRow.ItemArray = new object[] {
                        name,
                        surname,
                        password,
                        confirmpassword,
                        dob,
                        gender,
                        emailid,
                        alternateemailid,
                        otherdetails,
                        null};
                this.Rows.Add(rownewregistrationRow);
                return rownewregistrationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                newregistrationDataTable cln = ((newregistrationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new newregistrationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnsurname = base.Columns["surname"];
                this.columnpassword = base.Columns["password"];
                this.columnconfirmpassword = base.Columns["confirmpassword"];
                this.columndob = base.Columns["dob"];
                this.columngender = base.Columns["gender"];
                this.columnemailid = base.Columns["emailid"];
                this.columnalternateemailid = base.Columns["alternateemailid"];
                this.columnotherdetails = base.Columns["otherdetails"];
                this.columnregid = base.Columns["regid"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnsurname = new System.Data.DataColumn("surname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurname);
                this.columnpassword = new System.Data.DataColumn("password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpassword);
                this.columnconfirmpassword = new System.Data.DataColumn("confirmpassword", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnconfirmpassword);
                this.columndob = new System.Data.DataColumn("dob", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndob);
                this.columngender = new System.Data.DataColumn("gender", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngender);
                this.columnemailid = new System.Data.DataColumn("emailid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemailid);
                this.columnalternateemailid = new System.Data.DataColumn("alternateemailid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnalternateemailid);
                this.columnotherdetails = new System.Data.DataColumn("otherdetails", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnotherdetails);
                this.columnregid = new System.Data.DataColumn("regid", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregid);
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
                this.columnsurname.AllowDBNull = false;
                this.columnsurname.MaxLength = 50;
                this.columnpassword.AllowDBNull = false;
                this.columnpassword.MaxLength = 50;
                this.columnconfirmpassword.AllowDBNull = false;
                this.columnconfirmpassword.MaxLength = 50;
                this.columndob.AllowDBNull = false;
                this.columndob.MaxLength = 50;
                this.columngender.AllowDBNull = false;
                this.columngender.MaxLength = 50;
                this.columnemailid.AllowDBNull = false;
                this.columnemailid.MaxLength = 50;
                this.columnalternateemailid.AllowDBNull = false;
                this.columnalternateemailid.MaxLength = 50;
                this.columnotherdetails.AllowDBNull = false;
                this.columnotherdetails.MaxLength = 50;
                this.columnregid.AutoIncrement = true;
                this.columnregid.AllowDBNull = false;
                this.columnregid.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public newregistrationRow NewnewregistrationRow() {
                return ((newregistrationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new newregistrationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(newregistrationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.newregistrationRowChanged != null)) {
                    this.newregistrationRowChanged(this, new newregistrationRowChangeEvent(((newregistrationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.newregistrationRowChanging != null)) {
                    this.newregistrationRowChanging(this, new newregistrationRowChangeEvent(((newregistrationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.newregistrationRowDeleted != null)) {
                    this.newregistrationRowDeleted(this, new newregistrationRowChangeEvent(((newregistrationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.newregistrationRowDeleting != null)) {
                    this.newregistrationRowDeleting(this, new newregistrationRowChangeEvent(((newregistrationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovenewregistrationRow(newregistrationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                maillistDataSet ds = new maillistDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "newregistrationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class user_subjectDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnregid;
            
            private System.Data.DataColumn columnemailid;
            
            private System.Data.DataColumn columndate;
            
            private System.Data.DataColumn columnsubject;
            
            private System.Data.DataColumn columnresumepath;
            
            private System.Data.DataColumn columnpath;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public user_subjectDataTable() {
                this.TableName = "user_subject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal user_subjectDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected user_subjectDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regidColumn {
                get {
                    return this.columnregid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn emailidColumn {
                get {
                    return this.columnemailid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn subjectColumn {
                get {
                    return this.columnsubject;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn resumepathColumn {
                get {
                    return this.columnresumepath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public user_subjectRow this[int index] {
                get {
                    return ((user_subjectRow)(this.Rows[index]));
                }
            }
            
            public event user_subjectRowChangeEventHandler user_subjectRowChanging;
            
            public event user_subjectRowChangeEventHandler user_subjectRowChanged;
            
            public event user_subjectRowChangeEventHandler user_subjectRowDeleting;
            
            public event user_subjectRowChangeEventHandler user_subjectRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adduser_subjectRow(user_subjectRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public user_subjectRow Adduser_subjectRow(int regid, string emailid, string date, string subject, string resumepath, string path) {
                user_subjectRow rowuser_subjectRow = ((user_subjectRow)(this.NewRow()));
                rowuser_subjectRow.ItemArray = new object[] {
                        regid,
                        emailid,
                        date,
                        subject,
                        resumepath,
                        path};
                this.Rows.Add(rowuser_subjectRow);
                return rowuser_subjectRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                user_subjectDataTable cln = ((user_subjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new user_subjectDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnregid = base.Columns["regid"];
                this.columnemailid = base.Columns["emailid"];
                this.columndate = base.Columns["date"];
                this.columnsubject = base.Columns["subject"];
                this.columnresumepath = base.Columns["resumepath"];
                this.columnpath = base.Columns["path"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnregid = new System.Data.DataColumn("regid", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregid);
                this.columnemailid = new System.Data.DataColumn("emailid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemailid);
                this.columndate = new System.Data.DataColumn("date", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnsubject = new System.Data.DataColumn("subject", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubject);
                this.columnresumepath = new System.Data.DataColumn("resumepath", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnresumepath);
                this.columnpath = new System.Data.DataColumn("path", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnregid.AllowDBNull = false;
                this.columnemailid.AllowDBNull = false;
                this.columnemailid.MaxLength = 50;
                this.columndate.AllowDBNull = false;
                this.columndate.MaxLength = 50;
                this.columnsubject.AllowDBNull = false;
                this.columnsubject.MaxLength = 50;
                this.columnresumepath.AllowDBNull = false;
                this.columnresumepath.MaxLength = 250;
                this.columnpath.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public user_subjectRow Newuser_subjectRow() {
                return ((user_subjectRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new user_subjectRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(user_subjectRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.user_subjectRowChanged != null)) {
                    this.user_subjectRowChanged(this, new user_subjectRowChangeEvent(((user_subjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.user_subjectRowChanging != null)) {
                    this.user_subjectRowChanging(this, new user_subjectRowChangeEvent(((user_subjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.user_subjectRowDeleted != null)) {
                    this.user_subjectRowDeleted(this, new user_subjectRowChangeEvent(((user_subjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.user_subjectRowDeleting != null)) {
                    this.user_subjectRowDeleting(this, new user_subjectRowChangeEvent(((user_subjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeuser_subjectRow(user_subjectRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                maillistDataSet ds = new maillistDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "user_subjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class adminusersRow : System.Data.DataRow {
            
            private adminusersDataTable tableadminusers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal adminusersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableadminusers = ((adminusersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string adminuser {
                get {
                    return ((string)(this[this.tableadminusers.adminuserColumn]));
                }
                set {
                    this[this.tableadminusers.adminuserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string adminpwd {
                get {
                    return ((string)(this[this.tableadminusers.adminpwdColumn]));
                }
                set {
                    this[this.tableadminusers.adminpwdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class batchesRow : System.Data.DataRow {
            
            private batchesDataTable tablebatches;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal batchesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebatches = ((batchesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string batchno {
                get {
                    return ((string)(this[this.tablebatches.batchnoColumn]));
                }
                set {
                    this[this.tablebatches.batchnoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string coursecode {
                get {
                    try {
                        return ((string)(this[this.tablebatches.coursecodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'coursecode\' in table \'batches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebatches.coursecodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime expstdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablebatches.expstdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'expstdate\' in table \'batches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebatches.expstdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime announceddate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablebatches.announceddateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'announceddate\' in table \'batches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebatches.announceddateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trackdesc {
                get {
                    try {
                        return ((string)(this[this.tablebatches.trackdescColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'trackdesc\' in table \'batches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebatches.trackdescColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string displayremarks {
                get {
                    try {
                        return ((string)(this[this.tablebatches.displayremarksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'displayremarks\' in table \'batches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebatches.displayremarksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int displayreqd {
                get {
                    return ((int)(this[this.tablebatches.displayreqdColumn]));
                }
                set {
                    this[this.tablebatches.displayreqdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte displayorder {
                get {
                    try {
                        return ((byte)(this[this.tablebatches.displayorderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'displayorder\' in table \'batches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebatches.displayorderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesRow coursesRow {
                get {
                    return ((coursesRow)(this.GetParentRow(this.Table.ParentRelations["fk_coursecode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fk_coursecode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscoursecodeNull() {
                return this.IsNull(this.tablebatches.coursecodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcoursecodeNull() {
                this[this.tablebatches.coursecodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexpstdateNull() {
                return this.IsNull(this.tablebatches.expstdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexpstdateNull() {
                this[this.tablebatches.expstdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsannounceddateNull() {
                return this.IsNull(this.tablebatches.announceddateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetannounceddateNull() {
                this[this.tablebatches.announceddateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrackdescNull() {
                return this.IsNull(this.tablebatches.trackdescColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrackdescNull() {
                this[this.tablebatches.trackdescColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdisplayremarksNull() {
                return this.IsNull(this.tablebatches.displayremarksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdisplayremarksNull() {
                this[this.tablebatches.displayremarksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdisplayorderNull() {
                return this.IsNull(this.tablebatches.displayorderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdisplayorderNull() {
                this[this.tablebatches.displayorderColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class coursesRow : System.Data.DataRow {
            
            private coursesDataTable tablecourses;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal coursesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecourses = ((coursesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string coursecode {
                get {
                    return ((string)(this[this.tablecourses.coursecodeColumn]));
                }
                set {
                    this[this.tablecourses.coursecodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tablecourses.titleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'title\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.titleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    try {
                        return ((string)(this[this.tablecourses.versionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'version\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.versionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short duration {
                get {
                    try {
                        return ((short)(this[this.tablecourses.durationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'duration\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.durationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fee {
                get {
                    try {
                        return ((decimal)(this[this.tablecourses.feeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fee\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.feeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal otherfee {
                get {
                    try {
                        return ((decimal)(this[this.tablecourses.otherfeeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'otherfee\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.otherfeeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    try {
                        return ((string)(this[this.tablecourses.statusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'status\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.statusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remarks {
                get {
                    try {
                        return ((string)(this[this.tablecourses.remarksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'remarks\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.remarksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prerequisite {
                get {
                    try {
                        return ((string)(this[this.tablecourses.prerequisiteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'prerequisite\' in table \'courses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecourses.prerequisiteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tablecourses.titleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tablecourses.titleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionNull() {
                return this.IsNull(this.tablecourses.versionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionNull() {
                this[this.tablecourses.versionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdurationNull() {
                return this.IsNull(this.tablecourses.durationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdurationNull() {
                this[this.tablecourses.durationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfeeNull() {
                return this.IsNull(this.tablecourses.feeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfeeNull() {
                this[this.tablecourses.feeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsotherfeeNull() {
                return this.IsNull(this.tablecourses.otherfeeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetotherfeeNull() {
                this[this.tablecourses.otherfeeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tablecourses.statusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tablecourses.statusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremarksNull() {
                return this.IsNull(this.tablecourses.remarksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremarksNull() {
                this[this.tablecourses.remarksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprerequisiteNull() {
                return this.IsNull(this.tablecourses.prerequisiteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprerequisiteNull() {
                this[this.tablecourses.prerequisiteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesRow[] GetbatchesRows() {
                return ((batchesRow[])(base.GetChildRows(this.Table.ChildRelations["fk_coursecode"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class feedbackRow : System.Data.DataRow {
            
            private feedbackDataTable tablefeedback;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal feedbackRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefeedback = ((feedbackDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subfeedback {
                get {
                    return ((string)(this[this.tablefeedback.subfeedbackColumn]));
                }
                set {
                    this[this.tablefeedback.subfeedbackColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string emailid {
                get {
                    return ((string)(this[this.tablefeedback.emailidColumn]));
                }
                set {
                    this[this.tablefeedback.emailidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    return ((string)(this[this.tablefeedback.dateColumn]));
                }
                set {
                    this[this.tablefeedback.dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    return ((string)(this[this.tablefeedback.commentColumn]));
                }
                set {
                    this[this.tablefeedback.commentColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class newregistrationRow : System.Data.DataRow {
            
            private newregistrationDataTable tablenewregistration;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal newregistrationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablenewregistration = ((newregistrationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablenewregistration.nameColumn]));
                }
                set {
                    this[this.tablenewregistration.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string surname {
                get {
                    return ((string)(this[this.tablenewregistration.surnameColumn]));
                }
                set {
                    this[this.tablenewregistration.surnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string password {
                get {
                    return ((string)(this[this.tablenewregistration.passwordColumn]));
                }
                set {
                    this[this.tablenewregistration.passwordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string confirmpassword {
                get {
                    return ((string)(this[this.tablenewregistration.confirmpasswordColumn]));
                }
                set {
                    this[this.tablenewregistration.confirmpasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dob {
                get {
                    return ((string)(this[this.tablenewregistration.dobColumn]));
                }
                set {
                    this[this.tablenewregistration.dobColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gender {
                get {
                    return ((string)(this[this.tablenewregistration.genderColumn]));
                }
                set {
                    this[this.tablenewregistration.genderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string emailid {
                get {
                    return ((string)(this[this.tablenewregistration.emailidColumn]));
                }
                set {
                    this[this.tablenewregistration.emailidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string alternateemailid {
                get {
                    return ((string)(this[this.tablenewregistration.alternateemailidColumn]));
                }
                set {
                    this[this.tablenewregistration.alternateemailidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string otherdetails {
                get {
                    return ((string)(this[this.tablenewregistration.otherdetailsColumn]));
                }
                set {
                    this[this.tablenewregistration.otherdetailsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int regid {
                get {
                    return ((int)(this[this.tablenewregistration.regidColumn]));
                }
                set {
                    this[this.tablenewregistration.regidColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class user_subjectRow : System.Data.DataRow {
            
            private user_subjectDataTable tableuser_subject;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal user_subjectRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableuser_subject = ((user_subjectDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int regid {
                get {
                    return ((int)(this[this.tableuser_subject.regidColumn]));
                }
                set {
                    this[this.tableuser_subject.regidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string emailid {
                get {
                    return ((string)(this[this.tableuser_subject.emailidColumn]));
                }
                set {
                    this[this.tableuser_subject.emailidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    return ((string)(this[this.tableuser_subject.dateColumn]));
                }
                set {
                    this[this.tableuser_subject.dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subject {
                get {
                    return ((string)(this[this.tableuser_subject.subjectColumn]));
                }
                set {
                    this[this.tableuser_subject.subjectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resumepath {
                get {
                    return ((string)(this[this.tableuser_subject.resumepathColumn]));
                }
                set {
                    this[this.tableuser_subject.resumepathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableuser_subject.pathColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'path\' in table \'user_subject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_subject.pathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspathNull() {
                return this.IsNull(this.tableuser_subject.pathColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpathNull() {
                this[this.tableuser_subject.pathColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class adminusersRowChangeEvent : System.EventArgs {
            
            private adminusersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public adminusersRowChangeEvent(adminusersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public adminusersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class batchesRowChangeEvent : System.EventArgs {
            
            private batchesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesRowChangeEvent(batchesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public batchesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class coursesRowChangeEvent : System.EventArgs {
            
            private coursesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesRowChangeEvent(coursesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public coursesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class feedbackRowChangeEvent : System.EventArgs {
            
            private feedbackRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public feedbackRowChangeEvent(feedbackRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public feedbackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class newregistrationRowChangeEvent : System.EventArgs {
            
            private newregistrationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public newregistrationRowChangeEvent(newregistrationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public newregistrationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class user_subjectRowChangeEvent : System.EventArgs {
            
            private user_subjectRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public user_subjectRowChangeEvent(user_subjectRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public user_subjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace sat.db.maillistDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class adminusersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public adminusersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "adminusers";
            tableMapping.ColumnMappings.Add("adminuser", "adminuser");
            tableMapping.ColumnMappings.Add("adminpwd", "adminpwd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[adminusers] ([adminuser], [adminpwd]) VALUES (@adminuser, @adm" +
                "inpwd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@adminuser", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "adminuser", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@adminpwd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "adminpwd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::sat.Properties.Settings.Default.maillistConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT adminuser, adminpwd FROM dbo.adminusers";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(maillistDataSet.adminusersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual maillistDataSet.adminusersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            maillistDataSet.adminusersDataTable dataTable = new maillistDataSet.adminusersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet.adminusersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet dataSet) {
            return this.Adapter.Update(dataSet, "adminusers");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string adminuser, string adminpwd) {
            if ((adminuser == null)) {
                throw new System.ArgumentNullException("adminuser");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(adminuser));
            }
            if ((adminpwd == null)) {
                throw new System.ArgumentNullException("adminpwd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(adminpwd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class batchesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public batchesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "batches";
            tableMapping.ColumnMappings.Add("batchno", "batchno");
            tableMapping.ColumnMappings.Add("coursecode", "coursecode");
            tableMapping.ColumnMappings.Add("expstdate", "expstdate");
            tableMapping.ColumnMappings.Add("announceddate", "announceddate");
            tableMapping.ColumnMappings.Add("trackdesc", "trackdesc");
            tableMapping.ColumnMappings.Add("displayremarks", "displayremarks");
            tableMapping.ColumnMappings.Add("displayreqd", "displayreqd");
            tableMapping.ColumnMappings.Add("displayorder", "displayorder");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[batches] WHERE (([batchno] = @Original_batchno) AND ((@IsNull_coursecode = 1 AND [coursecode] IS NULL) OR ([coursecode] = @Original_coursecode)) AND ((@IsNull_expstdate = 1 AND [expstdate] IS NULL) OR ([expstdate] = @Original_expstdate)) AND ((@IsNull_announceddate = 1 AND [announceddate] IS NULL) OR ([announceddate] = @Original_announceddate)) AND ((@IsNull_trackdesc = 1 AND [trackdesc] IS NULL) OR ([trackdesc] = @Original_trackdesc)) AND ((@IsNull_displayremarks = 1 AND [displayremarks] IS NULL) OR ([displayremarks] = @Original_displayremarks)) AND ([displayreqd] = @Original_displayreqd) AND ((@IsNull_displayorder = 1 AND [displayorder] IS NULL) OR ([displayorder] = @Original_displayorder)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_batchno", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "batchno", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_coursecode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_expstdate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "expstdate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_expstdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "expstdate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_announceddate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "announceddate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_announceddate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "announceddate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_trackdesc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "trackdesc", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_trackdesc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "trackdesc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_displayremarks", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "displayremarks", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_displayremarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "displayremarks", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_displayreqd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "displayreqd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_displayorder", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "displayorder", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_displayorder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "displayorder", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[batches] ([batchno], [coursecode], [expstdate], [announceddate], [trackdesc], [displayremarks], [displayorder]) VALUES (@batchno, @coursecode, @expstdate, @announceddate, @trackdesc, @displayremarks, @displayorder);
SELECT batchno, coursecode, expstdate, announceddate, trackdesc, displayremarks, displayreqd, displayorder FROM batches WHERE (batchno = @batchno)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@batchno", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "batchno", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@expstdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "expstdate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@announceddate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "announceddate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@trackdesc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "trackdesc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@displayremarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "displayremarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@displayorder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "displayorder", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[batches] SET [batchno] = @batchno, [coursecode] = @coursecode, [expstdate] = @expstdate, [announceddate] = @announceddate, [trackdesc] = @trackdesc, [displayremarks] = @displayremarks, [displayorder] = @displayorder WHERE (([batchno] = @Original_batchno) AND ((@IsNull_coursecode = 1 AND [coursecode] IS NULL) OR ([coursecode] = @Original_coursecode)) AND ((@IsNull_expstdate = 1 AND [expstdate] IS NULL) OR ([expstdate] = @Original_expstdate)) AND ((@IsNull_announceddate = 1 AND [announceddate] IS NULL) OR ([announceddate] = @Original_announceddate)) AND ((@IsNull_trackdesc = 1 AND [trackdesc] IS NULL) OR ([trackdesc] = @Original_trackdesc)) AND ((@IsNull_displayremarks = 1 AND [displayremarks] IS NULL) OR ([displayremarks] = @Original_displayremarks)) AND ([displayreqd] = @Original_displayreqd) AND ((@IsNull_displayorder = 1 AND [displayorder] IS NULL) OR ([displayorder] = @Original_displayorder)));
SELECT batchno, coursecode, expstdate, announceddate, trackdesc, displayremarks, displayreqd, displayorder FROM batches WHERE (batchno = @batchno)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@batchno", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "batchno", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@expstdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "expstdate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@announceddate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "announceddate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@trackdesc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "trackdesc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@displayremarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "displayremarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@displayorder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "displayorder", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_batchno", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "batchno", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_coursecode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_expstdate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "expstdate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_expstdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "expstdate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_announceddate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "announceddate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_announceddate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "announceddate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_trackdesc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "trackdesc", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_trackdesc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "trackdesc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_displayremarks", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "displayremarks", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_displayremarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "displayremarks", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_displayreqd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "displayreqd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_displayorder", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "displayorder", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_displayorder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "displayorder", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::sat.Properties.Settings.Default.maillistConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT batchno, coursecode, expstdate, announceddate, trackdesc, displayremarks, " +
                "displayreqd, displayorder FROM dbo.batches";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(maillistDataSet.batchesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual maillistDataSet.batchesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            maillistDataSet.batchesDataTable dataTable = new maillistDataSet.batchesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet.batchesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet dataSet) {
            return this.Adapter.Update(dataSet, "batches");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_batchno, string Original_coursecode, System.Nullable<System.DateTime> Original_expstdate, System.Nullable<System.DateTime> Original_announceddate, string Original_trackdesc, string Original_displayremarks, int Original_displayreqd, System.Nullable<byte> Original_displayorder) {
            if ((Original_batchno == null)) {
                throw new System.ArgumentNullException("Original_batchno");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_batchno));
            }
            if ((Original_coursecode == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_coursecode));
            }
            if ((Original_expstdate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_expstdate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_announceddate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_announceddate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_trackdesc == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_trackdesc));
            }
            if ((Original_displayremarks == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_displayremarks));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_displayreqd));
            if ((Original_displayorder.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((byte)(Original_displayorder.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string batchno, string coursecode, System.Nullable<System.DateTime> expstdate, System.Nullable<System.DateTime> announceddate, string trackdesc, string displayremarks, System.Nullable<byte> displayorder) {
            if ((batchno == null)) {
                throw new System.ArgumentNullException("batchno");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(batchno));
            }
            if ((coursecode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(coursecode));
            }
            if ((expstdate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(expstdate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((announceddate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(announceddate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((trackdesc == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(trackdesc));
            }
            if ((displayremarks == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(displayremarks));
            }
            if ((displayorder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((byte)(displayorder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string batchno, string coursecode, System.Nullable<System.DateTime> expstdate, System.Nullable<System.DateTime> announceddate, string trackdesc, string displayremarks, System.Nullable<byte> displayorder, string Original_batchno, string Original_coursecode, System.Nullable<System.DateTime> Original_expstdate, System.Nullable<System.DateTime> Original_announceddate, string Original_trackdesc, string Original_displayremarks, int Original_displayreqd, System.Nullable<byte> Original_displayorder) {
            if ((batchno == null)) {
                throw new System.ArgumentNullException("batchno");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(batchno));
            }
            if ((coursecode == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(coursecode));
            }
            if ((expstdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(expstdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((announceddate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(announceddate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((trackdesc == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(trackdesc));
            }
            if ((displayremarks == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(displayremarks));
            }
            if ((displayorder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte)(displayorder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_batchno == null)) {
                throw new System.ArgumentNullException("Original_batchno");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_batchno));
            }
            if ((Original_coursecode == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_coursecode));
            }
            if ((Original_expstdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_expstdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_announceddate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_announceddate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_trackdesc == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_trackdesc));
            }
            if ((Original_displayremarks == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_displayremarks));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_displayreqd));
            if ((Original_displayorder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((byte)(Original_displayorder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class coursesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public coursesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "courses";
            tableMapping.ColumnMappings.Add("coursecode", "coursecode");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("version", "version");
            tableMapping.ColumnMappings.Add("duration", "duration");
            tableMapping.ColumnMappings.Add("fee", "fee");
            tableMapping.ColumnMappings.Add("otherfee", "otherfee");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("remarks", "remarks");
            tableMapping.ColumnMappings.Add("prerequisite", "prerequisite");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[courses] WHERE (([coursecode] = @Original_coursecode) AND ((@IsNull_title = 1 AND [title] IS NULL) OR ([title] = @Original_title)) AND ((@IsNull_version = 1 AND [version] IS NULL) OR ([version] = @Original_version)) AND ((@IsNull_duration = 1 AND [duration] IS NULL) OR ([duration] = @Original_duration)) AND ((@IsNull_fee = 1 AND [fee] IS NULL) OR ([fee] = @Original_fee)) AND ((@IsNull_otherfee = 1 AND [otherfee] IS NULL) OR ([otherfee] = @Original_otherfee)) AND ((@IsNull_status = 1 AND [status] IS NULL) OR ([status] = @Original_status)) AND ((@IsNull_remarks = 1 AND [remarks] IS NULL) OR ([remarks] = @Original_remarks)) AND ((@IsNull_prerequisite = 1 AND [prerequisite] IS NULL) OR ([prerequisite] = @Original_prerequisite)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_duration", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "duration", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_duration", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "duration", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_fee", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fee", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "fee", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_otherfee", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "otherfee", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_otherfee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "otherfee", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_status", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "status", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_status", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_remarks", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "remarks", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_remarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "remarks", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prerequisite", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prerequisite", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prerequisite", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prerequisite", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[courses] ([coursecode], [title], [version], [duration], [fee], [otherfee], [status], [remarks], [prerequisite]) VALUES (@coursecode, @title, @version, @duration, @fee, @otherfee, @status, @remarks, @prerequisite);
SELECT coursecode, title, version, duration, fee, otherfee, status, remarks, prerequisite FROM courses WHERE (coursecode = @coursecode)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@duration", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "duration", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "fee", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@otherfee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "otherfee", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@status", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@remarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "remarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prerequisite", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prerequisite", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[courses] SET [coursecode] = @coursecode, [title] = @title, [version] = @version, [duration] = @duration, [fee] = @fee, [otherfee] = @otherfee, [status] = @status, [remarks] = @remarks, [prerequisite] = @prerequisite WHERE (([coursecode] = @Original_coursecode) AND ((@IsNull_title = 1 AND [title] IS NULL) OR ([title] = @Original_title)) AND ((@IsNull_version = 1 AND [version] IS NULL) OR ([version] = @Original_version)) AND ((@IsNull_duration = 1 AND [duration] IS NULL) OR ([duration] = @Original_duration)) AND ((@IsNull_fee = 1 AND [fee] IS NULL) OR ([fee] = @Original_fee)) AND ((@IsNull_otherfee = 1 AND [otherfee] IS NULL) OR ([otherfee] = @Original_otherfee)) AND ((@IsNull_status = 1 AND [status] IS NULL) OR ([status] = @Original_status)) AND ((@IsNull_remarks = 1 AND [remarks] IS NULL) OR ([remarks] = @Original_remarks)) AND ((@IsNull_prerequisite = 1 AND [prerequisite] IS NULL) OR ([prerequisite] = @Original_prerequisite)));
SELECT coursecode, title, version, duration, fee, otherfee, status, remarks, prerequisite FROM courses WHERE (coursecode = @coursecode)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@duration", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "duration", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "fee", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@otherfee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "otherfee", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@status", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@remarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "remarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prerequisite", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prerequisite", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_coursecode", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "coursecode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_duration", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "duration", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_duration", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "duration", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_fee", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fee", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "fee", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_otherfee", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "otherfee", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_otherfee", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "otherfee", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_status", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "status", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_status", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_remarks", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "remarks", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_remarks", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "remarks", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prerequisite", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prerequisite", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prerequisite", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prerequisite", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::sat.Properties.Settings.Default.maillistConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT coursecode, title, version, duration, fee, otherfee, status, remarks, prer" +
                "equisite FROM dbo.courses";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(maillistDataSet.coursesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual maillistDataSet.coursesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            maillistDataSet.coursesDataTable dataTable = new maillistDataSet.coursesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet.coursesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet dataSet) {
            return this.Adapter.Update(dataSet, "courses");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_coursecode, string Original_title, string Original_version, System.Nullable<short> Original_duration, System.Nullable<decimal> Original_fee, System.Nullable<decimal> Original_otherfee, string Original_status, string Original_remarks, string Original_prerequisite) {
            if ((Original_coursecode == null)) {
                throw new System.ArgumentNullException("Original_coursecode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_coursecode));
            }
            if ((Original_title == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_title));
            }
            if ((Original_version == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_version));
            }
            if ((Original_duration.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((short)(Original_duration.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_fee.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_fee.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_otherfee.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_otherfee.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_status == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_status));
            }
            if ((Original_remarks == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_remarks));
            }
            if ((Original_prerequisite == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_prerequisite));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string coursecode, string title, string version, System.Nullable<short> duration, System.Nullable<decimal> fee, System.Nullable<decimal> otherfee, string status, string remarks, string prerequisite) {
            if ((coursecode == null)) {
                throw new System.ArgumentNullException("coursecode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(coursecode));
            }
            if ((title == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(title));
            }
            if ((version == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(version));
            }
            if ((duration.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((short)(duration.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((fee.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(fee.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((otherfee.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(otherfee.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((status == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(status));
            }
            if ((remarks == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(remarks));
            }
            if ((prerequisite == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(prerequisite));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string coursecode, 
                    string title, 
                    string version, 
                    System.Nullable<short> duration, 
                    System.Nullable<decimal> fee, 
                    System.Nullable<decimal> otherfee, 
                    string status, 
                    string remarks, 
                    string prerequisite, 
                    string Original_coursecode, 
                    string Original_title, 
                    string Original_version, 
                    System.Nullable<short> Original_duration, 
                    System.Nullable<decimal> Original_fee, 
                    System.Nullable<decimal> Original_otherfee, 
                    string Original_status, 
                    string Original_remarks, 
                    string Original_prerequisite) {
            if ((coursecode == null)) {
                throw new System.ArgumentNullException("coursecode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(coursecode));
            }
            if ((title == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(title));
            }
            if ((version == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(version));
            }
            if ((duration.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(duration.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((fee.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(fee.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((otherfee.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(otherfee.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((status == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(status));
            }
            if ((remarks == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(remarks));
            }
            if ((prerequisite == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(prerequisite));
            }
            if ((Original_coursecode == null)) {
                throw new System.ArgumentNullException("Original_coursecode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_coursecode));
            }
            if ((Original_title == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_title));
            }
            if ((Original_version == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_version));
            }
            if ((Original_duration.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((short)(Original_duration.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_fee.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_fee.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((Original_otherfee.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_otherfee.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((Original_status == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_status));
            }
            if ((Original_remarks == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_remarks));
            }
            if ((Original_prerequisite == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_prerequisite));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class feedbackTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public feedbackTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "feedback";
            tableMapping.ColumnMappings.Add("subfeedback", "subfeedback");
            tableMapping.ColumnMappings.Add("emailid", "emailid");
            tableMapping.ColumnMappings.Add("date", "date");
            tableMapping.ColumnMappings.Add("comment", "comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[feedback] ([subfeedback], [emailid], [date], [comment]) VALUES" +
                " (@subfeedback, @emailid, @date, @comment)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@subfeedback", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "subfeedback", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@emailid", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "emailid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@date", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::sat.Properties.Settings.Default.maillistConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT subfeedback, emailid, date, comment FROM dbo.feedback";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(maillistDataSet.feedbackDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual maillistDataSet.feedbackDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            maillistDataSet.feedbackDataTable dataTable = new maillistDataSet.feedbackDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet.feedbackDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet dataSet) {
            return this.Adapter.Update(dataSet, "feedback");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string subfeedback, string emailid, string date, string comment) {
            if ((subfeedback == null)) {
                throw new System.ArgumentNullException("subfeedback");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(subfeedback));
            }
            if ((emailid == null)) {
                throw new System.ArgumentNullException("emailid");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(emailid));
            }
            if ((date == null)) {
                throw new System.ArgumentNullException("date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(date));
            }
            if ((comment == null)) {
                throw new System.ArgumentNullException("comment");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(comment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class newregistrationTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public newregistrationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "newregistration";
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("surname", "surname");
            tableMapping.ColumnMappings.Add("password", "password");
            tableMapping.ColumnMappings.Add("confirmpassword", "confirmpassword");
            tableMapping.ColumnMappings.Add("dob", "dob");
            tableMapping.ColumnMappings.Add("gender", "gender");
            tableMapping.ColumnMappings.Add("emailid", "emailid");
            tableMapping.ColumnMappings.Add("alternateemailid", "alternateemailid");
            tableMapping.ColumnMappings.Add("otherdetails", "otherdetails");
            tableMapping.ColumnMappings.Add("regid", "regid");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[newregistration] ([name], [surname], [password], [confirmpassword], [dob], [gender], [emailid], [alternateemailid], [otherdetails]) VALUES (@name, @surname, @password, @confirmpassword, @dob, @gender, @emailid, @alternateemailid, @otherdetails)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@surname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "surname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@confirmpassword", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "confirmpassword", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dob", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dob", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gender", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gender", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@emailid", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "emailid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@alternateemailid", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "alternateemailid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@otherdetails", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "otherdetails", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::sat.Properties.Settings.Default.maillistConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT name, surname, password, confirmpassword, dob, gender, emailid, alternatee" +
                "mailid, otherdetails, regid FROM dbo.newregistration";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(maillistDataSet.newregistrationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual maillistDataSet.newregistrationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            maillistDataSet.newregistrationDataTable dataTable = new maillistDataSet.newregistrationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet.newregistrationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet dataSet) {
            return this.Adapter.Update(dataSet, "newregistration");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name, string surname, string password, string confirmpassword, string dob, string gender, string emailid, string alternateemailid, string otherdetails) {
            if ((name == null)) {
                throw new System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            if ((surname == null)) {
                throw new System.ArgumentNullException("surname");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(surname));
            }
            if ((password == null)) {
                throw new System.ArgumentNullException("password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(password));
            }
            if ((confirmpassword == null)) {
                throw new System.ArgumentNullException("confirmpassword");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(confirmpassword));
            }
            if ((dob == null)) {
                throw new System.ArgumentNullException("dob");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(dob));
            }
            if ((gender == null)) {
                throw new System.ArgumentNullException("gender");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(gender));
            }
            if ((emailid == null)) {
                throw new System.ArgumentNullException("emailid");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(emailid));
            }
            if ((alternateemailid == null)) {
                throw new System.ArgumentNullException("alternateemailid");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(alternateemailid));
            }
            if ((otherdetails == null)) {
                throw new System.ArgumentNullException("otherdetails");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(otherdetails));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class user_subjectTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public user_subjectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "user_subject";
            tableMapping.ColumnMappings.Add("regid", "regid");
            tableMapping.ColumnMappings.Add("emailid", "emailid");
            tableMapping.ColumnMappings.Add("date", "date");
            tableMapping.ColumnMappings.Add("subject", "subject");
            tableMapping.ColumnMappings.Add("resumepath", "resumepath");
            tableMapping.ColumnMappings.Add("path", "path");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[user_subject] ([regid], [emailid], [date], [subject], [resumep" +
                "ath], [path]) VALUES (@regid, @emailid, @date, @subject, @resumepath, @path)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@regid", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "regid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@emailid", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "emailid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@date", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@subject", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "subject", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@resumepath", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "resumepath", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@path", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "path", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::sat.Properties.Settings.Default.maillistConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT regid, emailid, date, subject, resumepath, path FROM dbo.user_subject";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(maillistDataSet.user_subjectDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual maillistDataSet.user_subjectDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            maillistDataSet.user_subjectDataTable dataTable = new maillistDataSet.user_subjectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet.user_subjectDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(maillistDataSet dataSet) {
            return this.Adapter.Update(dataSet, "user_subject");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int regid, string emailid, string date, string subject, string resumepath, string path) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(regid));
            if ((emailid == null)) {
                throw new System.ArgumentNullException("emailid");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(emailid));
            }
            if ((date == null)) {
                throw new System.ArgumentNullException("date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(date));
            }
            if ((subject == null)) {
                throw new System.ArgumentNullException("subject");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(subject));
            }
            if ((resumepath == null)) {
                throw new System.ArgumentNullException("resumepath");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(resumepath));
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(path));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591